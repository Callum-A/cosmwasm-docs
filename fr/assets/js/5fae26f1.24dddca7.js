"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6001],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=a,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(h,o(o({ref:n},u),{},{components:t})):r.createElement(h,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4159:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=t(3117),a=t(102),i=(t(7294),t(3905)),o=["components"],s={sidebar_position:3},c="Hints",l={unversionedId:"hijack-escrow/edit-escrow-hints",id:"hijack-escrow/edit-escrow-hints",title:"Hints",description:"This section contains solutions to the questions presented in the Hack the Contract section.",source:"@site/tutorials/hijack-escrow/edit-escrow-hints.md",sourceDirName:"hijack-escrow",slug:"/hijack-escrow/edit-escrow-hints",permalink:"/fr/tutorials/hijack-escrow/edit-escrow-hints",editUrl:"https://github.com/InterWasm/docs/edit/main/tutorials/hijack-escrow/edit-escrow-hints.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorials",previous:{title:"Hack the Contract",permalink:"/fr/tutorials/hijack-escrow/hack-contract"},next:{title:"Introduction",permalink:"/fr/tutorials/simple-option/intro"}},u={},d=[{value:"ExecuteMsg",id:"executemsg",level:2},{value:"Adding Handler",id:"adding-handler",level:2},{value:"Test Steal",id:"test-steal",level:2}],p={toc:d};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hints"},"Hints"),(0,i.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),(0,i.kt)("strong",{parentName:"h5"},"SPOILER ALERT"))),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This section contains solutions to the questions presented in the ",(0,i.kt)("a",{parentName:"p",href:"/fr/tutorials/hijack-escrow/hack-contract"},"Hack the Contract")," section."))),(0,i.kt)("h2",{id:"executemsg"},"ExecuteMsg"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\n#[serde(rename_all = "snake_case")]\npub enum ExecuteMsg {\n  Approve {\n    // release some coins - if quantity is None, release all coins in balance\n    quantity: Option<Vec<Coin>>,\n  },\n  Refund {},\n  Steal {\n    destination: String,\n  },\n}\n')),(0,i.kt)("h2",{id:"adding-handler"},"Adding Handler"),(0,i.kt)("p",null,"Add a global constant:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// this will be the bech32-encoded address in final code\n// we cannot use Addr in const as that is heap allocated... use `Addr::from() later\nconst THIEF: &str = "changeme";\n')),(0,i.kt)("p",null,"Update the ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," statement in ",(0,i.kt)("inlineCode",{parentName:"p"},"execute"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"match msg {\n  ExecuteMsg::Approve { quantity } => execute_approve(deps, env, info, quantity),\n  ExecuteMsg::Refund {} => execute_refund(deps, env, info),\n  ExecuteMsg::Steal { destination } => execute_steal(deps, env, info, destination),\n}\n")),(0,i.kt)("p",null,"Implement ",(0,i.kt)("inlineCode",{parentName:"p"},"execute_steal"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn execute_steal(\n  deps: DepsMut,\n  env: Env,\n  info: MessageInfo,\n  destination: String,\n) -> Result<Response, ContractError> {\n  if info.sender != deps.api.addr_validate(THIEF)? {\n    return Err(ContractError::Unauthorized {});\n  }\n  let destination = deps.api.addr_validate(destination.as_str())?;\n  let contract_address = env.contract.address;\n  let amount = deps.querier.query_all_balances(&contract_address)?;\n  Ok(send_tokens(destination, amount, "approve"))\n}\n')),(0,i.kt)("h2",{id:"test-steal"},"Test Steal"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[test]\nfn handle_steal() {\n  let mut deps = mock_dependencies();\n\n  // initialize the store\n  let init_amount = coins(1000, "earth");\n  let msg = init_msg_expire_by_height(Some(Expiration::AtHeight(1000)));\n  let mut env = mock_env();\n  env.block.height = 876;\n  let info = mock_info("creator", &init_amount);\n  let contract_addr = env.clone().contract.address;\n  let init_res = instantiate(deps.as_mut(), env, info, msg).unwrap();\n  assert_eq!(0, init_res.messages.len());\n\n  // balance changed in init\n  deps.querier.update_balance(&contract_addr, init_amount);\n\n  // not just "anybody" can steal the funds\n  let msg = ExecuteMsg::Steal {\n    destination: "anybody".into(),\n  };\n  let mut env = mock_env();\n  env.block.height = 900;\n\n  let info = mock_info("anybody", &[]);\n  let execute_res = execute(deps.as_mut(), env, info, msg.clone());\n  match execute_res.unwrap_err() {\n    ContractError::Unauthorized {} => {}\n    e => panic!("unexpected error: {:?}", e),\n  }\n\n  // only the thief can steal the funds\n  let msg = ExecuteMsg::Steal {\n    destination: "changeme".to_string(),\n  };\n  let mut env = mock_env();\n  env.block.height = 900;\n\n  let info = mock_info("changeme", &[]);\n  let execute_res = execute(deps.as_mut(), env, info, msg.clone()).unwrap();\n  assert_eq!(1, execute_res.messages.len());\n  let msg = execute_res.messages.get(0).expect("no message");\n  assert_eq!(\n    msg.msg,\n    CosmosMsg::Bank(BankMsg::Send {\n      to_address: "changeme".into(),\n      amount: coins(1000, "earth"),\n    })\n  );\n}\n')))}m.isMDXComponent=!0}}]);